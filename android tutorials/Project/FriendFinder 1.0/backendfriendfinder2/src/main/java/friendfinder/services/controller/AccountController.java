package friendfinder.services.controller;

import friendfinder.domain.Account;
import friendfinder.persistence.AccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import static org.springframework.web.bind.annotation.RequestMethod.*;

/**
 * Created by grace on 23/06/17.
 */
@RestController    // This means that this class is a Controller
@RequestMapping(path="/account") // This means URL's start with /account (after Application path)
public class AccountController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AccountRepository accountRepository;

    @GetMapping(path="/all")
    public Iterable<Account> getAllAccounts() {
        // This returns a JSON or XML with the users
        System.out.println("Getting all accounts");

        return accountRepository.findAll();
    }

    @GetMapping(path="/getByEmail")
    public String getAccount (@RequestParam String email) {
        System.out.println("Getting the account by email");
        String accountId = "";
        try {
            Account serchedAccount = accountRepository.findByEmail(email);
            accountId = String.valueOf(serchedAccount.getAccountId());
        } catch (Exception ex) {
            System.out.println("Error getting the Account: " + ex.toString());
        }
        return "The account id is: " + accountId;
    }

    // TODO need to have a user when I create an account?!
    @PostMapping
    public String postAccount (@RequestBody String email, String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        System.out.println("Creating an account");

        String accountId = "";
        try {
            Account acc = new Account(email,password);
            accountRepository.save(acc);
            accountId = String.valueOf(acc.getAccountId());
        } catch (Exception ex) {
            return "Error creating the account: " + ex.toString();
        }
        return "Account successfully created with id = " + accountId;
    }

    @PutMapping(value = "/{accountId}")
    public Account upateAccount (@PathVariable(value = "accountId") Integer accountId,
                                 @RequestBody Account entity) {
        System.out.println("Updating an account");
        try {
            accountRepository.save(entity);
        } catch (Exception ex) {
            System.out.println("Error updating the Account: " + ex.toString());
        }
        return entity;
    }

    @DeleteMapping(value = "/{accountId}")
    public void deleteAccount (@PathVariable(value = "accountId") Integer accountId) {
        System.out.println("Deleting an account");
        try {
            Account deleteAccount = accountRepository.findByAccountId(accountId);
            accountRepository.delete(deleteAccount);
        } catch (Exception ex) {
            System.out.println("Error deleting the Account: " + ex.toString());
        }
    }
}
