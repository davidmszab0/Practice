package friendfinder.services.controller;

import friendfinder.domain.Account;
import friendfinder.domain.User;
import friendfinder.persistence.AccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Created by grace on 23/06/17.
 */
@Controller    // This means that this class is a Controller
@RequestMapping(path="/account") // This means URL's start with /account (after Application path)
public class AccountController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AccountRepository accountRepository;

    @RequestMapping(path="/create") // Map ONLY GET Requests
    @ResponseBody
    public String createAccount (@RequestParam String email, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        String accountId = "";
        try {
            Account acc = new Account(email,password);
            accountRepository.save(acc);
            accountId = String.valueOf(acc.getId());
        } catch (Exception ex) {
            return "Error creating the account: " + ex.toString();
        }
        return "Account succesfully created with id = " + accountId;
    }

    @GetMapping(path="/allAccounts")
    public @ResponseBody Iterable<Account> getAllAccounts() {
        // This returns a JSON or XML with the users
        return accountRepository.findAll();
    }
}
